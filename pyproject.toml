[tool.poetry]
name = "deptry"
version = "0.0.1"
description = "A command line utility to check for unused, missing and transitive dependencies in a Python project."
authors = ["Florian Maas <fpgmaas@gmail.com>"]
maintainers = ["Mathieu Kniewallner <mathieu.kniewallner@gmail.com>"]
repository = "https://github.com/fpgmaas/deptry"
documentation = "https://fpgmaas.github.io/deptry/"
readme = "README.md"
license = "MIT"
packages = [
    { include = "deptry" }
]
keywords = ["dependency", "poetry"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
]

[tool.poetry.dependencies]
python = ">=3.8,<4.0"
chardet = ">=4.0.0"
click = "^8.0.0"
colorama = { version = ">=0.4.6", markers = "sys_platform == 'win32'" }
pathspec = ">=0.9.0"
tomli = { version = "^2.0.1", python = "<3.11" }

[tool.poetry.group.dev.dependencies]
pre-commit = "3.4.0"
pytest = "7.4.2"
pytest-cov = "4.1.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "1.5.3"
mkdocs-material = "9.4.4"

[tool.poetry.group.typing.dependencies]
mypy = "1.5.1"
types-chardet = "5.0.4.6"
types-colorama = { version = "0.4.15.12", markers = "sys_platform == 'win32'" }

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
target-version = ["py38"]
preview = true

[tool.coverage.report]
skip_empty = true
# Subset of rules from https://pypi.org/project/covdefaults/
exclude_lines = [
    # a more strict default pragma
    "# pragma: no cover\\b",

    # allow defensive code
    "^\\s*raise AssertionError\\b",
    "^\\s*raise NotImplementedError\\b",
    "^\\s*return NotImplemented\\b",
    "^\\s*raise$",

    # typing-related code
    "^\\s*if (False|TYPE_CHECKING):",
    ": \\.\\.\\.(\\s*#.*)?$",
    "^ +\\.\\.\\.$",
    "-> ['\"]?NoReturn['\"]?:",

    # non-runnable code
    "if __name__ == ['\"]__main__['\"]:$",
]

[tool.coverage.run]
branch = true
source = ["deptry"]

[tool.mypy]
files = ["deptry", "scripts", "tests"]
explicit_package_bases = true
exclude = ["tests/data"]
disallow_any_unimported = true
enable_error_code = [
    "ignore-without-code",
    "redundant-expr",
    "truthy-bool",
]
strict = true
warn_unreachable = true
pretty = true
show_error_codes = true

[tool.deptry]
extend_exclude = [
    "docs",
    "tests",
    "scripts",
]

[tool.deptry.per_rule_ignores]
DEP001 = ["tomllib"]

[tool.poetry.scripts]
deptry = "deptry.cli:deptry"

[tool.pytest.ini_options]
addopts = "--doctest-modules"
filterwarnings = ["error"]
norecursedirs = ["data*"]

[tool.ruff]
target-version = "py38"
line-length = 120
fix = true
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-blind-except
    "BLE",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-logging-format
    "G",
    # flake8-print
    "T20",
    # flake8-pytest-style
    "PT",
    # flake8-simplify
    "SIM",
    # flake8-type-checking
    "TCH",
    # flake8-use-pathlib
    "PTH",
    # isort
    "I",
    # mccabe
    "C90",
    # pep8-naming
    "N",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
]
extend-exclude = ["tests/data/*"]

[tool.ruff.flake8-type-checking]
strict = true

[tool.ruff.isort]
required-imports = ["from __future__ import annotations"]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "S603"]
