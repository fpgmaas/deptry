{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>deptry is a command line tool to check for issues with dependencies in a Python project, such as unused or missing dependencies. It supports projects using Poetry, pip, PDM, uv, and more generally any project supporting PEP 621 specification.</p> <p>Dependency issues are detected by scanning for imported modules within all Python files in a directory and its subdirectories, and comparing those to the dependencies listed in the project's requirements.</p>"},{"location":"#quickstart","title":"Quickstart","text":""},{"location":"#installation","title":"Installation","text":"<p>To add deptry to your project, run one of the following commands:</p> <pre><code># Install with poetry\npoetry add --group dev deptry\n\n# Install with pip\npip install deptry\n</code></pre> <p>Important</p> <p>When using pip to install deptry, make sure you install it within the virtual environment of your project. Installing deptry globally will not work, since it needs to have access to the metadata of the packages in the virtual environment.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>deptry should be run within the root directory of the project to be scanned, and the project should be running in its own dedicated virtual environment.</p>"},{"location":"#usage","title":"Usage","text":"<p>To scan your project for dependency issues, run</p> <pre><code>deptry .\n</code></pre> <p>Example output could look as follows:</p> <pre><code>Scanning 2 files...\n\nfoo/bar.py:1:0: DEP004 'numpy' imported but declared as a dev dependency\nfoo/bar.py:2:0: DEP001 'matplotlib' imported but missing from the dependency definitions\npyproject.toml: DEP002 'pandas' defined as a dependency but not used in the codebase\nFound 3 dependency issues.\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>deptry can be configured by using additional command line arguments, or by adding a <code>[tool.deptry]</code> section in <code>pyproject.toml</code>. For more information, see Usage and Configuration</p>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#0231-2025-07-30","title":"0.23.1 - 2025-07-30","text":""},{"location":"CHANGELOG/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Improve handling of <code>TYPE_CHECKING</code> blocks by supporting <code>import typing as t</code> and checking <code>t.TYPE_CHECKING</code> (#1218)</li> <li>Fix missing hyperlink in report output (#1162)</li> </ul>"},{"location":"CHANGELOG/#full-changelog","title":"Full Changelog","text":"<p>https://github.com/fpgmaas/deptry/compare/0.23.0...0.23.1</p>"},{"location":"CHANGELOG/#0230-2025-01-25","title":"0.23.0 - 2025-01-25","text":""},{"location":"CHANGELOG/#features","title":"Features","text":"<ul> <li>Correctly detect transitive dependencies with different module names (#1033)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_1","title":"Full Changelog","text":"<p>https://github.com/fpgmaas/deptry/compare/0.22.0...0.23.0</p>"},{"location":"CHANGELOG/#0220-2025-01-10","title":"0.22.0 - 2025-01-10","text":"<p>Poetry 2.0 introduced support for defining project metadata in PEP 621. This is now supported by deptry. Documentation has been updated to detail deptry's behavior.</p>"},{"location":"CHANGELOG/#features_1","title":"Features","text":"<ul> <li>Support PEP 621 in Poetry 2.0+ (#1003)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_2","title":"Full Changelog","text":"<p>https://github.com/fpgmaas/deptry/compare/0.21.2...0.22.0</p>"},{"location":"CHANGELOG/#0212-2024-12-19","title":"0.21.2 - 2024-12-19","text":""},{"location":"CHANGELOG/#miscellaneous","title":"Miscellaneous","text":"<ul> <li>Provide wheels for musllinux (#979)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_3","title":"Full Changelog","text":"<p>https://github.com/fpgmaas/deptry/compare/0.21.1...0.21.2</p>"},{"location":"CHANGELOG/#0211-2024-11-15","title":"0.21.1 - 2024-11-15","text":""},{"location":"CHANGELOG/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Handle string requirements files for <code>setuptools</code> dynamic   dependencies (#945)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_4","title":"Full Changelog","text":"<p>https://github.com/fpgmaas/deptry/compare/0.21.0...0.21.1</p>"},{"location":"CHANGELOG/#0210-2024-11-08","title":"0.21.0 - 2024-11-08","text":""},{"location":"CHANGELOG/#breaking-changes","title":"Breaking changes","text":""},{"location":"CHANGELOG/#ignore-files-handling","title":"Ignore files handling","text":"<p>Unless <code>--exclude</code> is used, deptry excludes files found in common ignore files (<code>.gitignore</code>, <code>.ignore</code>, <code>$HOME/.config/git/ignore</code>. ...), by using <code>ignore</code> Rust crate. The default behaviour has been changed, so that now:</p> <ul> <li>git-related ignore rules (<code>.gitignore</code>, <code>$HOME/.config/git/ignore</code>, ...) are only used if deptry is run inside a git   repository</li> <li><code>.gitignore</code> files that are in parent directories of the git repository from where deptry is run are not   used (previously, deptry would traverse parent directories up to the root system)</li> </ul> <p>If you were using <code>.gitignore</code> files for non-git repositories, you might want to switch to <code>.ignore</code> files, or use <code>--extend-exclude</code>.</p>"},{"location":"CHANGELOG/#requirements-files-parsing","title":"Requirements files parsing","text":"<p>deptry now uses <code>requirements-parser</code> to parse dependencies from requirements files, meaning that it can now extract nested requirements files referenced in other requirements files without having to explicitly configure it in deptry.</p> <p>For instance, if you have:</p> <pre><code># requirements.txt\n-r cli-requirements.txt\nhttpx==0.27.2\n</code></pre> <pre><code># cli-requirements.txt\nclick==8.1.7\n</code></pre> <p>With the default configuration, when parsing <code>requirements.txt</code>, both <code>httpx</code> and <code>click</code> will now be listed as dependencies by deptry, while previously, only <code>httpx</code> was, unless deptry was instructed about <code>cli-requirements.txt</code> by using <code>--requirements-files</code>. This new behaviour also impacts development requirements files, that can be overridden by using <code>--requirements-files-dev</code>.</p>"},{"location":"CHANGELOG/#python-38-support-dropped","title":"Python 3.8 support dropped","text":"<p>Support for Python 3.8 has been dropped, as it has reached its end of life.</p>"},{"location":"CHANGELOG/#features_2","title":"Features","text":"<ul> <li>deptry now detects development dependencies from <code>[dependency-groups]</code> section, introduced   by PEP 735 (#892)</li> <li>deptry now supports <code>setuptools</code> dynamic dependencies set in <code>[tool.setuptools.dynamic]</code> section,   see https://deptry.com/supported-dependency-managers/#setuptools for more   details (#894, #724)</li> <li>Drop support for Python 3.8 (#874)</li> <li>Improve ignore handling (#908)</li> <li>Parse requirements files with <code>requirements-parser</code>, adding support for parsing nested requirements   files referenced with <code>-r &lt;requirement_file&gt;</code> (#913)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_5","title":"Full Changelog","text":"<p>https://github.com/fpgmaas/deptry/compare/0.20.0...0.21.0</p>"},{"location":"CHANGELOG/#0200-2024-08-27","title":"0.20.0 - 2024-08-27","text":""},{"location":"CHANGELOG/#breaking-changes_1","title":"Breaking changes","text":"<p>In release 0.15.0, we announced the deprecation of the following flags:</p> <ul> <li><code>--requirements-txt</code> (and its <code>requirements_txt</code> setting counterpart in <code>pyproject.toml</code>)</li> <li><code>--requirements-txt-dev</code> (and its <code>requirements_txt_dev</code> setting counterpart in <code>pyproject.toml</code>)</li> </ul> <p>Those flags have now been removed. If you relied on them, you should now use, respectively:</p> <ul> <li><code>--requirements-files</code> (and its <code>requirements_files</code> setting counterpart in <code>pyproject.toml</code>)</li> <li><code>--requirements-files-dev</code> (and its <code>requirements_files_dev</code> setting counterpart in <code>pyproject.toml</code>)</li> </ul>"},{"location":"CHANGELOG/#features_3","title":"Features","text":"<ul> <li>deptry now detects uv and reads development dependencies from   <code>[uv.tool.dev-dependencies]</code> section (#816)</li> <li>Dynamically set max terminal width for better readability when displaying   help (#817)</li> <li>Remove deprecated <code>--requirements-txt</code>/<code>--requirements-txt-dev</code>   flags (#819)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_6","title":"Full Changelog","text":"<p>https://github.com/fpgmaas/deptry/compare/0.19.1...0.20.0</p>"},{"location":"CHANGELOG/#0191-2024-08-10","title":"0.19.1 - 2024-08-10","text":""},{"location":"CHANGELOG/#features_4","title":"Features","text":"<ul> <li>Add back PEP 420 support behind <code>--experimental-namespace-package</code> feature   flag (#808)</li> <li>Add support for Python 3.13 (#713, #809)</li> </ul>"},{"location":"CHANGELOG/#miscellaneous_1","title":"Miscellaneous","text":"<ul> <li>Provide Windows ARM64 wheels for Python (#807)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_7","title":"Full Changelog","text":"<p>https://github.com/fpgmaas/deptry/compare/0.19.0...0.19.1</p>"},{"location":"CHANGELOG/#0190-2024-08-08","title":"0.19.0 - 2024-08-08","text":"<p>This release reverts https://github.com/fpgmaas/deptry/pull/753 that caused a noticeable performance regression on large codebases. The intent of the initial PR was to support projects following PEP 420, so if your project currently relies on this behaviour, feel free to manifest your interest in https://github.com/fpgmaas/deptry/issues/740.</p>"},{"location":"CHANGELOG/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Revert \"fix(core): use <code>rglob</code> to guess local Python modules (#753)\" (#798)</li> </ul>"},{"location":"CHANGELOG/#new-contributors","title":"New Contributors","text":"<ul> <li>@huisman made their first contribution in #796</li> </ul>"},{"location":"CHANGELOG/#full-changelog_8","title":"Full Changelog","text":"<p>https://github.com/fpgmaas/deptry/compare/0.18.0...0.19.0</p>"},{"location":"CHANGELOG/#0180-2024-07-31","title":"0.18.0 - 2024-07-31","text":""},{"location":"CHANGELOG/#features_5","title":"Features","text":"<ul> <li>Support imports using <code>importlib.import_module</code> (#782)</li> </ul>"},{"location":"CHANGELOG/#new-contributors_1","title":"New Contributors","text":"<ul> <li>@lmmx made their first contribution in #782</li> </ul>"},{"location":"CHANGELOG/#full-changelog_9","title":"Full Changelog","text":"<p>https://github.com/fpgmaas/deptry/compare/0.17.0...0.18.0</p>"},{"location":"CHANGELOG/#0170-2024-07-20","title":"0.17.0 - 2024-07-20","text":""},{"location":"CHANGELOG/#features_6","title":"Features","text":"<ul> <li>Add a new rule <code>DEP005</code> to detect project dependencies that are in the standard library. (#761)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_10","title":"Full Changelog","text":"<p>https://github.com/fpgmaas/deptry/compare/0.16.2...0.17.0</p>"},{"location":"CHANGELOG/#0162-2024-07-05","title":"0.16.2 - 2024-07-05","text":""},{"location":"CHANGELOG/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>Avoid crashing on PEP 621 and Poetry projects with no dependencies (#752)</li> <li>Recursively search for Python files to detect local modules, to better support namespace packages (#753)</li> </ul>"},{"location":"CHANGELOG/#miscellaneous_2","title":"Miscellaneous","text":"<ul> <li>Provide macOS ARM wheels for PyPy (#691)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_11","title":"Full Changelog","text":"<p>https://github.com/fpgmaas/deptry/compare/0.16.1...0.16.2</p>"},{"location":"CHANGELOG/#0161-2024-04-06","title":"0.16.1 - 2024-04-06","text":""},{"location":"CHANGELOG/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>Skip type checking blocks whether future annotations are used (#662)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_12","title":"Full Changelog","text":"<p>https://github.com/fpgmaas/deptry/compare/0.16.0...0.16.1</p>"},{"location":"CHANGELOG/#0160-2024-04-04","title":"0.16.0 - 2024-04-04","text":""},{"location":"CHANGELOG/#breaking-changes_2","title":"Breaking changes","text":""},{"location":"CHANGELOG/#typingtype_checking-handling","title":"<code>typing.TYPE_CHECKING</code> handling","text":"<p>Imports guarded by <code>typing.TYPE_CHECKING</code> when using <code>from __future__ import annotations</code> are now skipped. For instance:</p> <pre><code>from __future__ import annotations\n\nfrom typing import TYPE_CHECKING\n\nif TYPE_CHECKING:\n  # This import will not be extracted as it is guarded by `TYPE_CHECKING` and `from __future__ import annotations`\n  # is used. This means the import should only be evaluated by type checkers, and should not be evaluated during runtime.\n  import mypy_boto3_s3\n</code></pre> <p>See https://deptry.com/usage/#imports-extraction for more information.</p>"},{"location":"CHANGELOG/#requirementsin-handling","title":"<code>requirements.in</code> handling","text":"<p>On projects using <code>pip</code> requirements format for defining dependencies, if <code>requirements_files</code> option is not overridden, deptry will first search for a <code>requirements.in</code> file before <code>requirements.txt</code>, to better support projects using <code>pip-tools</code> and the like (which includes <code>uv</code> and Rye) out of the box. If you use <code>requirements.in</code> and want deptry to use <code>requirements.txt</code>, you can either pass <code>--requirements-files requirements.txt</code> when invoking deptry, or set the option in <code>pyproject.toml</code>:</p> <pre><code>[tool.deptry]\nrequirements_files = [\"requirements.txt\"]\n</code></pre>"},{"location":"CHANGELOG/#features_7","title":"Features","text":"<ul> <li>Skip type checking blocks when parsing imports (#652)</li> <li>Search for <code>requirements.in</code> before <code>requirements.txt</code> on projects using <code>pip</code> requirements format for   dependencies (#641)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>Show module name instead of library name when reporting DEP003 (#644</li> <li>Better support for notebooks by handling magic commands and line   continuations (#656)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_13","title":"Full Changelog","text":"<p>https://github.com/fpgmaas/deptry/compare/0.15.0...0.16.0</p>"},{"location":"CHANGELOG/#0150-2024-03-24","title":"0.15.0 - 2024-03-24","text":""},{"location":"CHANGELOG/#breaking-changes_3","title":"Breaking changes","text":"<ul> <li>In release 0.12.0, we announced the deprecation of the following flags:</li> <li><code>--ignore-unused</code></li> <li><code>--ignore-obsolete</code></li> <li><code>--ignore-missing</code></li> <li><code>--ignore-misplaced-dev</code></li> <li><code>--ignore-transitive</code></li> <li><code>--skip-unused</code></li> <li><code>--skip-obsolete</code></li> <li><code>--skip-missing</code></li> <li><code>--skip-misplaced-dev</code></li> <li><code>--skip-transitive</code></li> </ul> <p>These flags are now no longer supported. If you are still using these flags and are planning to upgrade to this release, please refer to the release notes of 0.12.0 for instructions on how to migrate to the new method of configuration. (#596)</p>"},{"location":"CHANGELOG/#deprecations","title":"Deprecations","text":"<ul> <li>The options <code>requirements-txt</code> and <code>requirements-txt-dev</code> are replaced with <code>requirements-files</code> and <code>requirements-files-dev</code>, respectively, to provide better support for projects that use both a <code>requirements.in</code> and a <code>requirements.txt</code>. The legacy options will still be usable for the time being, with a warning being shown in the terminal, but they will be removed in a future release, so you are advised to migrate to the new ones. (#609)</li> </ul>"},{"location":"CHANGELOG/#features_8","title":"Features","text":"<ul> <li>Implement the collection of all Python files to be scanned by deptry in Rust (#591)</li> <li>Implement import extraction for notebooks in Rust (#606)</li> <li>Use ruff's AST parser for import extraction from Python files. This also adds support for files with Python 3.12 f-string syntax, see PEP 701. (#615)</li> <li>Improved logging of the detected imports and their locations when deptry is run in verbose mode (#627)</li> <li>Introduce the <code>--pep621-dev-dependency-groups</code> flag that allows users to specify which groups under <code>[project.optional-dependencies]</code> are considered development dependencies (#628)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>Add back the license classifier, which was lost during the transition from Poetry to PDM in (#624)</li> </ul>"},{"location":"CHANGELOG/#miscellaneous_3","title":"Miscellaneous","text":"<ul> <li>Remove upper bound on <code>requires-python</code> (#621)</li> <li>Moved the documentation to deptry.com (#630)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_14","title":"Full Changelog","text":"<p>https://github.com/fpgmaas/deptry/compare/0.14.2...0.15.0</p>"},{"location":"CHANGELOG/#0142-2024-03-19","title":"0.14.2 - 2024-03-19","text":"<p>This release adds back MIT license classifier in package metadata, that was lost when changing the build backend (#623).</p>"},{"location":"CHANGELOG/#full-changelog_15","title":"Full Changelog","text":"<p>https://github.com/fpgmaas/deptry/compare/0.14.1...0.14.2</p>"},{"location":"CHANGELOG/#0141-2024-03-18","title":"0.14.1 - 2024-03-18","text":"<p>This release improves runtime performance of built wheels by about 5%, and reduces their size (#594).</p> <p>PyPy wheels are now also published on PyPI (#612).</p>"},{"location":"CHANGELOG/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>Improve handling of comments in <code>requirements.txt</code> files (#588)</li> <li>Avoid process hanging on error when parsing Python files (#619)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_16","title":"Full Changelog","text":"<p>https://github.com/fpgmaas/deptry/compare/0.14.0...0.14.1</p>"},{"location":"CHANGELOG/#0140-2024-03-14","title":"0.14.0 - 2024-03-14","text":"<p>This release significantly improves the speed of <code>deptry</code>, particularly for large projects, by utilizing Rust to manage the parsing of Abstract Syntax Trees (AST) from <code>.py</code> files and to extract the import statements. For some benchmarks, see below:</p> <p></p> <p>Since the changes are all in the back-end, little has changed for the user other than the execution speed. The two minor notable changes are:</p> <ul> <li>Improved identification of <code>column</code> identifier in imports detection. Where earlier the column identifier for an imported module <code>foo</code> in the line <code>import foo</code> would be <code>0</code>, it now points to column <code>8</code>.</li> </ul>"},{"location":"CHANGELOG/#available-wheels-on-pypi","title":"Available wheels on PyPI","text":"<p>Where earlier releases published a single <code>.whl</code> file to PyPI, with the move to Rust we now build and publish wheels for a variety of platforms and architectures. More specifically, wheel files for the following combinations are now available on PyPI:</p> <ul> <li>Linux: ABI3 wheels for <code>x86_64</code> and <code>aarch64</code> architectures.</li> <li>Windows: ABI3 wheels for the <code>x64</code> architecture.</li> <li>macOS: ABI3 wheels for <code>x86_64</code> and <code>aarch64</code> (Apple Silicon) architectures.</li> </ul> <p>Alongside the ABI3 wheels, we provide a source distribution (sdist) package.</p>"},{"location":"CHANGELOG/#full-changelog_17","title":"Full Changelog","text":"<p>https://github.com/fpgmaas/deptry/compare/0.13.0...0.14.0</p>"},{"location":"CHANGELOG/#0130-2024-03-12","title":"0.13.0 - 2024-03-12","text":""},{"location":"CHANGELOG/#features_9","title":"Features","text":"<ul> <li>deptry will now report invalid configuration options defined in <code>pyproject.toml</code> (#571)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>Stricten URL detection to avoid flagging libraries like <code>httpx</code> as URLs (#570)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_18","title":"Full Changelog","text":"<p>https://github.com/fpgmaas/deptry/compare/0.12.0...0.13.0</p>"},{"location":"CHANGELOG/#0120-2023-06-18","title":"0.12.0 - 2023-06-18","text":"<p>This release introduces a significant change to the command-line flags and configuration options to make use of the error codes introduced in release 0.10.0.</p> Code Issue DEP001 Missing dependency DEP002 Unused/obsolete dependency DEP003 Transitive dependency DEP004 Misplaced development dependency"},{"location":"CHANGELOG/#features_10","title":"Features","text":"<ul> <li>Replaced --skip-unused, --skip-obsolete, --skip-missing, --skip-misplaced-dev flags: We have replaced the currently existing flags with the more generalized <code>--ignore</code> flag. Now, instead of skipping types of checks, you can specify the exact error codes to ignore using the <code>--ignore</code> flag (e.g., <code>deptry . --ignore \"DEP001,DEP002\"</code> to ignore checking for missing and unused dependencies).</li> </ul> <p>The changes are also reflected in <code>pyproject.toml</code>. For example,</p> <pre><code>[tool.deptry]\nskip_missing = true\nskip_unused = true\n</code></pre> <p>is superseded by</p> <pre><code>[tool.deptry]\nignore = [\"DEP001\", \"DEP002\"]\n</code></pre> <ul> <li>Replaced --ignore-unused, --ignore-obsolete, --ignore-missing, --ignore-misplaced-dev flags: Previously, specific checks for spefific dependencies/modules could be ingored using the <code>--ignore-&lt;code&gt;</code> flags. We are replacing these flags with the more generalized <code>--per-rule-ignores</code> flag. This flag allows you to specify dependencies that should be ignored for specific error codes, offering granular control over which errors are ignored for which dependencies. For instance, <code>deptry . --per-rule-ignores DEP001=matplotlib,DEP002=pandas|numpy</code> means <code>DEP001</code> will be ignored for <code>matplotlib</code>, while <code>DEP002</code> will be ignored for both <code>pandas</code> and <code>numpy</code>.</li> </ul> <p>The changes are also reflected in <code>pyproject.toml</code>. For example,</p> <pre><code>[tool.deptry]\nignore_missing = [\"matplotlib\"]\nignore_unused = [\"pandas\", \"numpy\"]\n</code></pre> <p>is superseded by</p> <pre><code>[tool.deptry.per_rule_ignores]\nDEP001 = [\"matplotlib\"]\nDEP002 = [\"pandas\", \"numpy\"]\n</code></pre> <p>Please note that while the legacy arguments are still functional as of Deptry 0.12.0, we do plan to remove them in a future 1.0.0 release.</p> <ul> <li>Consider all groups for dev dependencies (#392)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>Handle <code>SyntaxError</code> raised by <code>ast.parse</code> (#426)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_19","title":"Full Changelog","text":"<p>https://github.com/fpgmaas/deptry/compare/0.11.0...0.12.0</p>"},{"location":"CHANGELOG/#0110-2023-05-10","title":"0.11.0 - 2023-05-10","text":""},{"location":"CHANGELOG/#deprecations_1","title":"Deprecations","text":"<ul> <li><code>--skip-obsolete</code> CLI option and its <code>skip_obsolete</code> couterpart in <code>pyproject.toml</code> are being replaced with <code>--skip-unused</code> and <code>skip_unused</code>, respectively</li> <li><code>--ignore-obsolete</code> CLI option and its <code>ignore_obsolete</code> counterpart in <code>pyproject.toml</code> are being replaced with <code>--ignore-unused</code> and <code>ignore_unused</code>, respectively</li> </ul> <p>This is done to account for a wording change, as we are replacing \"obsolete\" with \"unused\", since it has a clearer meaning for users.</p> <p>The legacy options will still be usable for the time being, with a warning being shown in the terminal, but they will be removed in a future release, so you are advised to migrate to the new ones.</p>"},{"location":"CHANGELOG/#features_11","title":"Features","text":"<ul> <li>Add ability to pass multiple source directories (#381)</li> <li>Replace the word <code>obsolete</code> with <code>unused</code> (#373)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>Load gitignore from where CLI is invoked (#380)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_20","title":"Full Changelog","text":"<p>https://github.com/fpgmaas/deptry/compare/0.10.1...0.11.0</p>"},{"location":"CHANGELOG/#0101-2023-05-09","title":"0.10.1 - 2023-05-09","text":""},{"location":"CHANGELOG/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>Fix terminal output when only a single file is scanned (#372)</li> <li>Fix issue with <code>DEP004</code> being raised incorrectly when a dependency is defined both as a dev one and non-dev one (#376)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_21","title":"Full Changelog","text":"<p>0.10.0...0.10.1</p>"},{"location":"CHANGELOG/#0100-2023-05-08","title":"0.10.0 - 2023-05-08","text":""},{"location":"CHANGELOG/#breaking-changes_4","title":"Breaking Changes","text":"<p>Release <code>0.10.0</code> of deptry brings a significant improvement to the way in which issues are reported. Previously, issues were reported in a summarized format, making it difficult for users to pinpoint exactly where in the code the issue was occurring. This is resolved by https://github.com/fpgmaas/deptry/pull/357, which adds location information to the detected issues.</p> <p>https://github.com/fpgmaas/deptry/pull/367 adds error codes to identify the different issue types:</p> Code Issue DEP001 Missing dependency DEP002 Obsolete dependency DEP003 Transitive dependency DEP004 Misplaced development dependency <p>Here's an example of how issues are now reported in release 0.10.0:</p> <pre><code>foo/bar.py:11:11: DEP002 'an_import' imported but missing from the dependencies\nfoo/bar.py:12:11: DEP002 'another_import' imported but missing from the dependencies\nfoo/baz.py:13:11: DEP003 'cfgv' imported but it is a transitive dependency\npyproject.toml: DEP001 'pandas' defined as a dependency but not used in the codebase\n</code></pre> <p>The json output generated by using the <code>-o</code> or <code>--json-output</code> is also modified to include the new error codes and location information:</p> <pre><code>{\n  \"error\": {\n    \"code\": \"DEP001\",\n    \"message\": \"'seven' imported but missing from the dependency definitions\"\n  },\n  \"module\": \"seven\",\n  \"location\": {\n    \"file\": \"foo/bar.py\",\n    \"line\": 2,\n    \"column\": 0\n  }\n}\n</code></pre>"},{"location":"CHANGELOG/#features_12","title":"Features","text":"<ul> <li>Add location to error reports by (#357)</li> <li>Add colours to text output by (#368)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_22","title":"Full Changelog","text":"<p>0.9.0...0.10.0</p>"},{"location":"CHANGELOG/#090-2023-05-06","title":"0.9.0 - 2023-05-06","text":""},{"location":"CHANGELOG/#breaking-changes_5","title":"Breaking Changes","text":""},{"location":"CHANGELOG/#python-37-support-dropped","title":"Python 3.7 support dropped","text":"<p>Support for Python 3.7 has been dropped in https://github.com/fpgmaas/deptry/pull/352, given that it will reach end of life soon, and that PyPI stats show a really low usage of it. If you are using <code>deptry</code> on Python 3.7, consider upgrading to 3.8, or staying on <code>&lt;0.9.0</code>.</p>"},{"location":"CHANGELOG/#behaviour-changes-in-package-name-guessing","title":"Behaviour changes in package name guessing","text":"<p>In case packages don't provide the Python modules they expose, <code>deptry</code> tries to guess the package name by converting <code>-</code> to <code>_</code>, as a best effort, and warns about it in the logs. Before https://github.com/fpgmaas/deptry/pull/337, <code>deptry</code> always guessed the module name, regardless of if the package provided the necessary information or not. Now, it will only guess the module name if the package does not provide the information and no mapping has been provided using the new <code>--package-module-name-map</code> flag (or <code>package_module_name_map</code> option in <code>pyproject.toml</code>).</p>"},{"location":"CHANGELOG/#handling-modules-without-__init__py","title":"Handling modules without <code>__init__.py</code>","text":"<p>With https://github.com/fpgmaas/deptry/pull/285, <code>deptry</code> will now consider the following things as local modules: - directories without <code>__init__.py</code> (and at least one Python file) - single Python files</p> <p>Previously, <code>deptry</code> only considered directories as local modules if an <code>__init__.py</code> was present, and did not account for cases where a single Python file could also be a local module, alongside directories.</p>"},{"location":"CHANGELOG/#features_13","title":"Features","text":"<ul> <li>Drop support for Python 3.7 (#352)</li> <li>Only try to guess module associated to a dependency as a fallback for when the package doesn't provide such information (#337)</li> <li>Handle local modules without <code>__init__.py</code> (#285)</li> <li>Ability to configure a map of package names to module names (#333)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>Replace 'PDM' with 'poetry' in log (#294)</li> <li>Account for Windows in code and tests (#343)</li> </ul>"},{"location":"CHANGELOG/#miscellaneous_4","title":"Miscellaneous","text":"<ul> <li>Run tests on macOS and Windows on CI (#342)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_23","title":"Full Changelog","text":"<p>0.8.0...0.9.0</p>"},{"location":"CHANGELOG/#080-2023-01-24","title":"0.8.0 - 2023-01-24","text":""},{"location":"CHANGELOG/#features_14","title":"Features","text":"<ul> <li>Don't filter out <code>setuptools</code> (#262)</li> <li>Use <code>sys.stdlib_module_names</code> to get stdlibs in Python &gt;= 3.10 (#275)</li> </ul>"},{"location":"CHANGELOG/#miscellaneous_5","title":"Miscellaneous","text":"<ul> <li>Drop <code>flake8</code> to only use <code>ruff</code> (#268)</li> <li>Use more <code>ruff</code> rules and replace <code>pyupgrade</code> and <code>pygrep-hooks</code> usages (#276)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_24","title":"Full Changelog","text":"<p>0.7.1...0.8.0</p>"},{"location":"CHANGELOG/#071-2023-01-07","title":"0.7.1 - 2023-01-07","text":""},{"location":"CHANGELOG/#features_15","title":"Features","text":"<ul> <li>Exclude files from <code>.gitignore</code> #248)</li> <li>Add support for known first party modules #257)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_25","title":"Full Changelog","text":"<p>0.7.0...0.7.1</p>"},{"location":"CHANGELOG/#070-2022-12-27","title":"0.7.0 - 2022-12-27","text":""},{"location":"CHANGELOG/#breaking-changes_6","title":"Breaking Changes","text":"<p>Previously,  <code>deptry</code> always searched for a <code>pyproject.toml</code> file in the root directory passed as a positional argument to the <code>deptry</code> command. Since this is not in line with what most other tools in the ecosystem do, this is changed in release <code>0.7.0</code>.</p> <p>In previous releases, when running:</p> <pre><code>deptry src\n</code></pre> <p><code>deptry</code> would search for both a <code>pyproject.toml</code> and for Python files to scan in the <code>src</code> directory.</p> <p>Since this release, when running:</p> <pre><code>deptry src\n</code></pre> <p><code>deptry</code> will search for <code>pyproject.toml</code> in the location it is run from, and for Python files to scan in the <code>src</code> directory.</p> <p>The downside of the changes outlined above, is that this could break some projects that did explicitly want to find <code>pyproject.toml</code> in a directory other than the positional argument specified as <code>root</code>. For this purpose, release <code>0.7.0</code> adds a <code>--config</code> argument that can be used to explicitly pass the location of <code>pyproject.toml</code>.</p>"},{"location":"CHANGELOG/#features_16","title":"Features","text":"<ul> <li>Separate <code>pyproject.toml</code> location from <code>root</code> argument (#244)</li> <li>Expose and handle <code>--config</code> argument (#245)</li> </ul>"},{"location":"CHANGELOG/#miscellaneous_6","title":"Miscellaneous","text":"<ul> <li>Only load local modules once by (#242)</li> <li>More efficient Python files retrieval (#243)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_26","title":"Full Changelog","text":"<p>0.6.6...0.7.0</p>"},{"location":"CHANGELOG/#066-2022-11-22","title":"0.6.6 - 2022-11-22","text":""},{"location":"CHANGELOG/#features_17","title":"Features","text":"<ul> <li>Add .direnv to default exclude argument (#197)</li> <li>Add logic to <code>NotebookImportExtractor</code> to guess the encoding on initial <code>UnicodeDecodeError</code> (#216)</li> </ul>"},{"location":"CHANGELOG/#miscellaneous_7","title":"Miscellaneous","text":"<ul> <li>Decrease lower bound of <code>chardet</code> dependency to <code>4.0.0</code> (#205)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_27","title":"Full Changelog","text":"<p>0.6.5...0.6.6</p>"},{"location":"CHANGELOG/#065-2022-11-14","title":"0.6.5 - 2022-11-14","text":"<p>No user facing change.</p>"},{"location":"CHANGELOG/#full-changelog_28","title":"Full Changelog","text":"<p>0.6.4...0.6.5</p>"},{"location":"CHANGELOG/#064-2022-11-09","title":"0.6.4 - 2022-11-09","text":""},{"location":"CHANGELOG/#features_18","title":"Features","text":"<ul> <li>Add support for PEP 621 (#166)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_13","title":"Bug Fixes","text":"<ul> <li>Remove obsolete duplicated local import detection (#172)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_29","title":"Full Changelog","text":"<p>0.6.3...0.6.4</p>"},{"location":"CHANGELOG/#063-2022-10-23","title":"0.6.3 - 2022-10-23","text":""},{"location":"CHANGELOG/#features_19","title":"Features","text":"<ul> <li>Add hook for usage with <code>pre-commit</code> (#157)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_30","title":"Full Changelog","text":"<p>0.6.2...0.6.3</p>"},{"location":"CHANGELOG/#062-2022-10-22","title":"0.6.2 - 2022-10-22","text":""},{"location":"CHANGELOG/#bug-fixes_14","title":"Bug Fixes","text":"<ul> <li>Solve issue with importing from local files (#163)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_31","title":"Full Changelog","text":"<p>0.6.1...0.6.2</p>"},{"location":"CHANGELOG/#061-2022-10-08","title":"0.6.1 - 2022-10-08","text":""},{"location":"CHANGELOG/#features_20","title":"Features","text":"<ul> <li>Add support for PEP621 with PDM (#155)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_32","title":"Full Changelog","text":"<p>0.5.13...0.6.1</p>"},{"location":"CHANGELOG/#0513-2022-10-02","title":"0.5.13 - 2022-10-02","text":""},{"location":"CHANGELOG/#features_21","title":"Features","text":"<ul> <li>Add support for Python 3.11 (#152)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_33","title":"Full Changelog","text":"<p>0.5.12...0.5.13</p>"},{"location":"CHANGELOG/#0512-2022-10-01","title":"0.5.12 - 2022-10-01","text":""},{"location":"CHANGELOG/#features_22","title":"Features","text":"<ul> <li>Accept multiple <code>requirements.txt</code> (#141)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_34","title":"Full Changelog","text":"<p>0.5.11...0.5.12</p>"},{"location":"CHANGELOG/#0511-2022-09-30","title":"0.5.11 - 2022-09-30","text":""},{"location":"CHANGELOG/#miscellaneous_8","title":"Miscellaneous","text":"<ul> <li>Remove dependency on <code>isort</code> (#140)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_35","title":"Full Changelog","text":"<p>0.5.10...0.5.11</p>"},{"location":"CHANGELOG/#0510-2022-09-27","title":"0.5.10 - 2022-09-27","text":"<p>No user facing change.</p>"},{"location":"CHANGELOG/#full-changelog_36","title":"Full Changelog","text":"<p>0.5.9...0.5.10</p>"},{"location":"CHANGELOG/#059-2022-09-26","title":"0.5.9 - 2022-09-26","text":""},{"location":"CHANGELOG/#bug-fixes_15","title":"Bug Fixes","text":"<ul> <li>Fix issue with logging if no <code>[tool.deptry]</code> section was found in <code>pyproject.toml</code> (#134)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_37","title":"Full Changelog","text":"<p>0.5.8...0.5.9</p>"},{"location":"CHANGELOG/#058-2022-09-26","title":"0.5.8 - 2022-09-26","text":"<p>No user facing change.</p>"},{"location":"CHANGELOG/#full-changelog_38","title":"Full Changelog","text":"<p>0.5.7...0.5.8</p>"},{"location":"CHANGELOG/#057-2022-09-24","title":"0.5.7 - 2022-09-24","text":""},{"location":"CHANGELOG/#features_23","title":"Features","text":"<ul> <li>Add option to write output to JSON file (#125)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_39","title":"Full Changelog","text":"<p>0.5.6...0.5.7</p>"},{"location":"CHANGELOG/#056-2022-09-22","title":"0.5.6 - 2022-09-22","text":""},{"location":"CHANGELOG/#miscellaneous_9","title":"Miscellaneous","text":"<ul> <li>Replace <code>toml</code> with <code>tomli</code>/<code>tomllib</code> for parsing TOML (#123)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_40","title":"Full Changelog","text":"<p>0.5.5...0.5.6</p>"},{"location":"CHANGELOG/#055-2022-09-20","title":"0.5.5 - 2022-09-20","text":""},{"location":"CHANGELOG/#miscellaneous_10","title":"Miscellaneous","text":"<ul> <li>Rename <code>DIRECTORY</code> argument to <code>ROOT</code> (#121)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_41","title":"Full Changelog","text":"<p>0.5.4...0.5.5</p>"},{"location":"CHANGELOG/#054-2022-09-19","title":"0.5.4 - 2022-09-19","text":""},{"location":"CHANGELOG/#miscellaneous_11","title":"Miscellaneous","text":"<ul> <li>Add a summary line to the logging (#120)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_42","title":"Full Changelog","text":"<p>0.5.3...0.5.4</p>"},{"location":"CHANGELOG/#053-2022-09-18","title":"0.5.3 - 2022-09-18","text":""},{"location":"CHANGELOG/#miscellaneous_12","title":"Miscellaneous","text":"<ul> <li>Set Python version upper range to <code>&lt;4.0</code> (#117)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_43","title":"Full Changelog","text":"<p>0.5.2...0.5.3</p>"},{"location":"CHANGELOG/#052-2022-09-18","title":"0.5.2 - 2022-09-18","text":""},{"location":"CHANGELOG/#features_24","title":"Features","text":"<ul> <li>Extract top level module names from <code>RECORD</code> (#116)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_44","title":"Full Changelog","text":"<p>0.5.1...0.5.2</p>"},{"location":"CHANGELOG/#051-2022-09-18","title":"0.5.1 - 2022-09-18","text":""},{"location":"CHANGELOG/#features_25","title":"Features","text":"<ul> <li>Parse <code>egg=...</code> in urls for <code>requirements.txt</code> (#115)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_45","title":"Full Changelog","text":"<p>0.5.0...0.5.1</p>"},{"location":"CHANGELOG/#050-2022-09-17","title":"0.5.0 - 2022-09-17","text":""},{"location":"CHANGELOG/#features_26","title":"Features","text":"<ul> <li>Support regexes for file exclusions (#111)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_46","title":"Full Changelog","text":"<p>0.4.7...0.5.0</p>"},{"location":"CHANGELOG/#047-2022-09-15","title":"0.4.7 - 2022-09-15","text":""},{"location":"CHANGELOG/#miscellaneous_13","title":"Miscellaneous","text":"<ul> <li>Only decode files if initial decoding failed (#105)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_47","title":"Full Changelog","text":"<p>0.4.6...0.4.7</p>"},{"location":"CHANGELOG/#046-2022-09-14","title":"0.4.6 - 2022-09-14","text":""},{"location":"CHANGELOG/#features_27","title":"Features","text":"<ul> <li>Detect file encoding with <code>chardet</code> before parsing Python files (#103)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_48","title":"Full Changelog","text":"<p>0.4.5...0.4.6</p>"},{"location":"CHANGELOG/#045-2022-09-13","title":"0.4.5 - 2022-09-13","text":"<p>No user facing change.</p>"},{"location":"CHANGELOG/#full-changelog_49","title":"Full Changelog","text":"<p>0.4.4...0.4.5</p>"},{"location":"CHANGELOG/#044-2022-09-13","title":"0.4.4 - 2022-09-13","text":""},{"location":"CHANGELOG/#features_28","title":"Features","text":"<ul> <li>Add support for reading dependencies form urls in <code>requirements.txt</code> (#100)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_50","title":"Full Changelog","text":"<p>0.4.3...0.4.4</p>"},{"location":"CHANGELOG/#043-2022-09-13","title":"0.4.3 - 2022-09-13","text":""},{"location":"CHANGELOG/#bug-fixes_16","title":"Bug Fixes","text":"<ul> <li>Solve an issue where missing dev dependencies were added to the list as <code>None</code> (#99)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_51","title":"Full Changelog","text":"<p>0.4.2...0.4.3</p>"},{"location":"CHANGELOG/#042-2022-09-12","title":"0.4.2 - 2022-09-12","text":""},{"location":"CHANGELOG/#features_29","title":"Features","text":"<ul> <li>Add a warning to not install <code>deptry</code> globally, but within virtual environment (#93)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_17","title":"Bug Fixes","text":"<ul> <li>Fix an issue with <code>requirements.txt</code> not being found if not in root dir (#94)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_52","title":"Full Changelog","text":"<p>0.4.1...0.4.2</p>"},{"location":"CHANGELOG/#041-2022-09-11","title":"0.4.1 - 2022-09-11","text":""},{"location":"CHANGELOG/#features_30","title":"Features","text":"<ul> <li>Ignore <code>setuptools</code> and <code>setup.py</code> by default (#88)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_53","title":"Full Changelog","text":"<p>0.4.0...0.4.1</p>"},{"location":"CHANGELOG/#040-2022-09-11","title":"0.4.0 - 2022-09-11","text":""},{"location":"CHANGELOG/#features_31","title":"Features","text":"<ul> <li>Add support for <code>requirements.txt</code> (#87)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_54","title":"Full Changelog","text":"<p>0.3.2...0.4.0</p>"},{"location":"CHANGELOG/#032-2022-09-10","title":"0.3.2 - 2022-09-10","text":"<p>No user facing change.</p>"},{"location":"CHANGELOG/#full-changelog_55","title":"Full Changelog","text":"<p>0.3.1...0.3.2</p>"},{"location":"CHANGELOG/#031-2022-09-10","title":"0.3.1 - 2022-09-10","text":""},{"location":"CHANGELOG/#features_32","title":"Features","text":"<ul> <li>Use commas to separate items in CLI arguments (#87)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_56","title":"Full Changelog","text":"<p>0.2.16...0.3.1</p>"},{"location":"CHANGELOG/#0217-2022-09-10","title":"0.2.17 - 2022-09-10","text":""},{"location":"CHANGELOG/#features_33","title":"Features","text":"<ul> <li>Add <code>--extend-exclude</code> option (#76)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_57","title":"Full Changelog","text":"<p>0.2.16...0.2.17</p>"},{"location":"CHANGELOG/#0216-2022-09-09","title":"0.2.16 - 2022-09-09","text":"<p>No user facing change.</p>"},{"location":"CHANGELOG/#full-changelog_58","title":"Full Changelog","text":"<p>0.2.15...0.2.16</p>"},{"location":"CHANGELOG/#0215-2022-09-09","title":"0.2.15 - 2022-09-09","text":""},{"location":"CHANGELOG/#features_34","title":"Features","text":"<ul> <li>Guess top level name of modules by replacing <code>-</code> with <code>_</code> (#73)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_59","title":"Full Changelog","text":"<p>0.2.14...0.2.15</p>"},{"location":"CHANGELOG/#0214-2022-09-09","title":"0.2.14 - 2022-09-09","text":""},{"location":"CHANGELOG/#features_35","title":"Features","text":"<ul> <li>Handle conditional dependencies (#65)</li> </ul>"},{"location":"CHANGELOG/#miscellaneous_14","title":"Miscellaneous","text":"<ul> <li>Decrease lower bound of <code>click</code> dependency to <code>8.0.0</code> (#205)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_60","title":"Full Changelog","text":"<p>0.2.13...0.2.14</p>"},{"location":"CHANGELOG/#0213-2022-09-09","title":"0.2.13 - 2022-09-09","text":"<p>No user facing change.</p>"},{"location":"CHANGELOG/#full-changelog_61","title":"Full Changelog","text":"<p>0.2.12...0.2.13</p>"},{"location":"CHANGELOG/#0212-2022-09-09","title":"0.2.12 - 2022-09-09","text":"<p>No user facing change.</p>"},{"location":"CHANGELOG/#full-changelog_62","title":"Full Changelog","text":"<p>0.2.11...0.2.12</p>"},{"location":"CHANGELOG/#0211-2022-09-09","title":"0.2.11 - 2022-09-09","text":"<p>No user facing change.</p>"},{"location":"CHANGELOG/#full-changelog_63","title":"Full Changelog","text":"<p>0.2.10...0.2.11</p>"},{"location":"CHANGELOG/#0210-2022-09-08","title":"0.2.10 - 2022-09-08","text":"<p>No user facing change.</p>"},{"location":"CHANGELOG/#full-changelog_64","title":"Full Changelog","text":"<p>0.2.9...0.2.10</p>"},{"location":"CHANGELOG/#029-2022-09-08","title":"0.2.9 - 2022-09-08","text":""},{"location":"CHANGELOG/#bug-fixes_18","title":"Bug Fixes","text":"<ul> <li>Fix issue with relative imports (#54)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_65","title":"Full Changelog","text":"<p>0.2.8...0.2.9</p>"},{"location":"CHANGELOG/#028-2022-09-08","title":"0.2.8 - 2022-09-08","text":""},{"location":"CHANGELOG/#features_36","title":"Features","text":"<ul> <li>Add check for misplaced development dependencies (#51)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_66","title":"Full Changelog","text":"<p>0.2.7...0.2.8</p>"},{"location":"CHANGELOG/#027-2022-09-07","title":"0.2.7 - 2022-09-07","text":"<p>No user facing change.</p>"},{"location":"CHANGELOG/#full-changelog_67","title":"Full Changelog","text":"<p>0.2.6...0.2.7</p>"},{"location":"CHANGELOG/#026-2022-09-07","title":"0.2.6 - 2022-09-07","text":""},{"location":"CHANGELOG/#features_37","title":"Features","text":"<ul> <li>Add <code>--version</code> argument to the CLI to display <code>deptry</code>'s version (#47)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_68","title":"Full Changelog","text":"<p>0.2.5...0.2.6</p>"},{"location":"CHANGELOG/#025-2022-09-07","title":"0.2.5 - 2022-09-07","text":""},{"location":"CHANGELOG/#features_38","title":"Features","text":"<ul> <li>Add check for missing and transitive dependencies (#43)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_69","title":"Full Changelog","text":"<p>0.2.3...0.2.5</p>"},{"location":"CHANGELOG/#023-2022-09-06","title":"0.2.3 - 2022-09-06","text":"<p>No user facing change.</p>"},{"location":"CHANGELOG/#full-changelog_70","title":"Full Changelog","text":"<p>0.2.2...0.2.3</p>"},{"location":"CHANGELOG/#022-2022-09-06","title":"0.2.2 - 2022-09-06","text":""},{"location":"CHANGELOG/#full-changelog_71","title":"Full Changelog","text":"<p>0.2.1...0.2.2</p>"},{"location":"CHANGELOG/#021-2022-09-05","title":"0.2.1 - 2022-09-05","text":""},{"location":"CHANGELOG/#full-changelog_72","title":"Full Changelog","text":"<p>0.2.0...0.2.1</p>"},{"location":"CHANGELOG/#020-2022-09-05","title":"0.2.0 - 2022-09-05","text":""},{"location":"CHANGELOG/#features_39","title":"Features","text":"<ul> <li>Add support for Python 3.7 (#27)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_73","title":"Full Changelog","text":"<p>0.1.5...0.2.0</p>"},{"location":"CHANGELOG/#015-2022-09-04","title":"0.1.5 - 2022-09-04","text":""},{"location":"CHANGELOG/#miscellaneous_15","title":"Miscellaneous","text":"<ul> <li>Improve logging statements (#25)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_74","title":"Full Changelog","text":"<p>0.1.4...0.1.5</p>"},{"location":"CHANGELOG/#014-2022-09-04","title":"0.1.4 - 2022-09-04","text":""},{"location":"CHANGELOG/#miscellaneous_16","title":"Miscellaneous","text":"<ul> <li>Improve logging when package name is not found (#25)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_75","title":"Full Changelog","text":"<p>0.1.3...0.1.4</p>"},{"location":"CHANGELOG/#013-2022-09-04","title":"0.1.3 - 2022-09-04","text":""},{"location":"CHANGELOG/#features_40","title":"Features","text":"<ul> <li>Parse imports within <code>if</code>/<code>else</code> statements (#23)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_76","title":"Full Changelog","text":"<p>0.1.2...0.1.3</p>"},{"location":"CHANGELOG/#012-2022-09-04","title":"0.1.2 - 2022-09-04","text":"<p>No use facing change.</p>"},{"location":"CHANGELOG/#full-changelog_77","title":"Full Changelog","text":"<p>0.1.1...0.1.2</p>"},{"location":"CHANGELOG/#011-2022-09-04","title":"0.1.1 - 2022-09-04","text":""},{"location":"CHANGELOG/#features_41","title":"Features","text":"<ul> <li>Replace <code>deptry check</code> command with <code>deptry</code> (#21)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_78","title":"Full Changelog","text":"<p>0.0.4...0.1.1</p>"},{"location":"CHANGELOG/#004-2022-09-03","title":"0.0.4 - 2022-09-03","text":""},{"location":"CHANGELOG/#features_42","title":"Features","text":"<ul> <li>Add ability to specify the root directory (#13)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_79","title":"Full Changelog","text":"<p>0.0.3...0.0.4</p>"},{"location":"CHANGELOG/#003-2022-09-03","title":"0.0.3 - 2022-09-03","text":""},{"location":"CHANGELOG/#features_43","title":"Features","text":"<ul> <li>Add support for Jupyter Notebooks (#11)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_80","title":"Full Changelog","text":"<p>0.0.2...0.0.3</p>"},{"location":"CHANGELOG/#002-2022-09-02","title":"0.0.2 - 2022-09-02","text":""},{"location":"CHANGELOG/#features_44","title":"Features","text":"<ul> <li>Add mapping for common packages without metadata (#1)</li> </ul>"},{"location":"CHANGELOG/#full-changelog_81","title":"Full Changelog","text":"<p>0.0.1...0.0.2</p>"},{"location":"CHANGELOG/#001-2022-09-02","title":"0.0.1 - 2022-09-02","text":"<p>Initial release</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways.</p>"},{"location":"contributing/#types-of-contributions","title":"Types of contributions","text":""},{"location":"contributing/#reporting-bugs","title":"Reporting bugs","text":"<p>Report bugs at https://github.com/fpgmaas/deptry/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fixing-bugs","title":"Fixing bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement a fix for it.</p>"},{"location":"contributing/#implementing-features","title":"Implementing features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#writing-documentation","title":"Writing documentation","text":"<p>deptry could always use more documentation, whether as part of the official documentation, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submitting-feedback","title":"Submitting feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/fpgmaas/deptry/issues.</p> <p>If you are proposing a new feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get started!","text":"<p>Ready to contribute? Here's how to set up deptry for local development. Please note this documentation assumes you already have uv, Git and pre-commit installed and ready to go.</p> <ol> <li> <p>Fork the deptry repository on GitHub.</p> </li> <li> <p>Clone your fork locally:     <pre><code>cd &lt;directory_in_which_repo_should_be_created&gt;\ngit clone git@github.com:YOUR_NAME/deptry.git\n</code></pre></p> </li> <li> <p>Now you need to set up your local environment. Navigate into the directory:     <pre><code>cd deptry\n</code></pre></p> <p>Then, install the virtual environment with: <pre><code>uv sync\n</code></pre></p> </li> <li> <p>Install <code>pre-commit</code> hooks to run linters/formatters at commit time:     <pre><code>pre-commit install\n</code></pre></p> </li> <li> <p>Create a branch for local development:     <pre><code>git checkout -b name-of-your-bugfix-or-feature\n</code></pre></p> <p>Now you can make your changes locally.</p> </li> <li> <p>If you are adding a feature or fixing a bug, make sure to add tests in the <code>tests</code> directory.</p> </li> <li> <p>Once you're done, validate that all unit and functional tests are passing:     <pre><code>make test\n</code></pre></p> </li> <li> <p>Before submitting a pull request, you should also run tox. This will run the tests across all the Python versions that deptry supports:     <pre><code>tox\n</code></pre></p> <p>This requires you to have multiple versions of Python installed. This step is also triggered in the CI pipeline, so you could also choose to skip this step locally.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:     <pre><code>git add .\ngit commit -m \"Your detailed description of your changes.\"\ngit push origin name-of-your-bugfix-or-feature\n</code></pre></p> </li> <li> <p>Submit a pull request through GitHub.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull request guidelines","text":"<p>Before you submit a pull request, ensure that it meets the following guidelines:</p> <ol> <li>If the pull request adds a functionality or fixes a bug, the pull request should include tests.</li> <li>If the pull request adds a functionality, the documentation in <code>docs</code> directory should probably be updated.</li> </ol>"},{"location":"rules-violations/","title":"Rules &amp; Violations","text":"<p>deptry checks your project against the following rules related to dependencies:</p> Code Description More information DEP001 Project should not contain missing dependencies link DEP002 Project should not contain unused dependencies link DEP003 Project should not use transitive dependencies link DEP004 Project should not use development dependencies in non-development code link DEP005 Project should not contain dependencies that are in the standard library link <p>Any of the checks can be disabled with the <code>ignore</code> flag. Specific dependencies or modules can be ignored with the <code>per-rule-ignores</code> flag.</p>"},{"location":"rules-violations/#missing-dependencies-dep001","title":"Missing dependencies (DEP001)","text":"<p>Python modules that are imported within a project, for which no corresponding packages are found in the dependencies.</p>"},{"location":"rules-violations/#example","title":"Example","text":"<p>On a project with the following dependencies:</p> <pre><code>[project]\ndependencies = []\n</code></pre> <p>and the following <code>main.py</code> that is the only Python file in the project:</p> <pre><code>import httpx\n\ndef make_http_request():\n    return httpx.get(\"https://example.com\")\n</code></pre> <p>deptry will report <code>httpx</code> as a missing dependency because it is imported in the project, but not defined in the dependencies.</p> <p>To fix the issue, <code>httpx</code> should be added to <code>[project.dependencies]</code>:</p> <pre><code>[project]\ndependencies = [\"httpx==0.23.1\"]\n</code></pre>"},{"location":"rules-violations/#unused-dependencies-dep002","title":"Unused dependencies (DEP002)","text":"<p>Dependencies that are required in a project, but are not used within the codebase.</p> <p>Note</p> <p>Development dependencies are not considered for this rule, as they are usually meant to only be used outside the codebase (for instance in tests, or as CLI tools for type-checking, formatting, etc.).</p>"},{"location":"rules-violations/#example_1","title":"Example","text":"<p>On a project with the following dependencies:</p> <pre><code>[project]\ndependencies = [\n    \"httpx==0.23.1\",\n    \"requests==2.28.1\",\n]\n</code></pre> <p>and the following <code>main.py</code> that is the only Python file in the project:</p> <pre><code>import httpx\nimport requests\n\ndef make_http_request():\n    return httpx.get(\"https://example.com\")\n</code></pre> <p>deptry will report <code>requests</code> as an unused dependency because it is not used in the project.</p> <p>To fix the issue, <code>requests</code> should be removed from <code>[project.dependencies]</code>:</p> <pre><code>[project]\ndependencies = [\"httpx==0.23.1\"]\n</code></pre>"},{"location":"rules-violations/#transitive-dependencies-dep003","title":"Transitive dependencies (DEP003)","text":"<p>Python modules that are imported within a project, where the corresponding dependencies are in the dependency tree, but not as direct dependencies. For example, assume your project has a <code>.py</code> file that imports module A. However, A is not in your project's dependencies. Instead, another package (B) is in your list of dependencies, which in turn depends on A. Package A should be explicitly added to your project's list of dependencies.</p>"},{"location":"rules-violations/#example_2","title":"Example","text":"<p>On a project with the following dependencies:</p> <pre><code>[project]\ndependencies = [\n    # Here `httpx` depends on `certifi` package.\n    \"httpx==0.23.1\",\n]\n</code></pre> <p>and the following <code>main.py</code> that is the only Python file in the project:</p> <pre><code>import certifi\nimport httpx\n\ndef make_http_request():\n    return httpx.get(\"https://example.com\")\n\ndef get_certificates_location():\n    return certifi.where()\n</code></pre> <p>deptry will report <code>certifi</code> as a transitive dependency because it is used in the project, but not defined as a direct dependency, and is only present in the dependency tree because another dependency depends on it.</p> <p>To fix the issue, <code>certifi</code> should be explicitly added to <code>[project.dependencies]</code>:</p> <pre><code>[project]\ndependencies = [\n    \"certifi==2024.7.4\",\n    \"httpx==0.23.1\",\n]\n</code></pre>"},{"location":"rules-violations/#misplaced-development-dependencies-dep004","title":"Misplaced development dependencies (DEP004)","text":"<p>Dependencies specified as development ones that should be included as regular dependencies.</p>"},{"location":"rules-violations/#example_3","title":"Example","text":"<p>On a project with the following dependencies:</p> <pre><code>[project]\ndependencies = [\"httpx==0.23.1\"]\n\n[tool.pdm.dev-dependencies]\ntest = [\n    \"orjson==3.8.3\",\n    \"pytest==7.2.0\",\n]\n</code></pre> <p>And the following <code>main.py</code> that is the only Python file in the project:</p> <pre><code>import httpx\nimport orjson\n\ndef make_http_request():\n    return httpx.get(\"https://example.com\")\n\ndef dump_json():\n    return orjson.dumps({\"foo\": \"bar\"})\n</code></pre> <p>deptry will report <code>orjson</code> as a misplaced development dependency because it is used in non-development code.</p> <p>To fix the issue, <code>orjson</code> should be moved from <code>[tool.pdm.dev-dependencies]</code> to <code>[project.dependencies]</code>:</p> <pre><code>[project]\ndependencies = [\n    \"httpx==0.23.1\",\n    \"orjson==3.8.3\",\n]\n\n[tool.pdm.dev-dependencies]\ntest = [\"pytest==7.2.0\"]\n</code></pre>"},{"location":"rules-violations/#standard-library-dependencies-dep005","title":"Standard library dependencies (DEP005)","text":"<p>Dependencies that are part of the Python standard library should not be defined as dependencies in your project.</p>"},{"location":"rules-violations/#example_4","title":"Example","text":"<p>On a project with the following dependencies:</p> <pre><code>[project]\ndependencies = [\n    \"asyncio\",\n]\n</code></pre> <p>and the following <code>main.py</code> in the project:</p> <pre><code>import asyncio\n\ndef async_example():\n    return asyncio.run(some_coroutine())\n</code></pre> <p>deptry will report <code>asyncio</code> as a standard library dependency because it is part of the standard library, yet it is defined as a dependency in the project.</p> <p>To fix the issue, <code>asyncio</code> should be removed from <code>[project.dependencies]</code>:</p> <pre><code>[project]\ndependencies = []\n</code></pre>"},{"location":"supported-dependency-managers/","title":"Supported dependency managers","text":"<p>While most dependency managers support the standard PEP 621 format for defining dependencies in <code>pyproject.toml</code>, not all of them do. Even those that do often provide additional ways to define dependencies that are not standardized.</p> <p>deptry can extract dependencies for any dependency manager that supports standard PEP 621, while also extracting them from locations that are specific to some dependency managers that support this standard, but provide additional ways of defining dependencies (e.g., uv, Poetry).</p> <p>deptry can also extract dependencies from dependency managers that do not support PEP 621 at all (e.g., pip).</p>"},{"location":"supported-dependency-managers/#pep-621","title":"PEP 621","text":"<p>deptry fully supports PEP 621 standard, and uses the presence of a <code>[project]</code> section in <code>pyproject.toml</code> to determine that the project uses PEP 621.</p> <p>By default, deptry extracts, from <code>pyproject.toml</code>:</p> <ul> <li>regular dependencies from:<ul> <li><code>dependencies</code> entry under <code>[project]</code> section</li> <li>groups under <code>[project.optional-dependencies]</code> section</li> </ul> </li> <li>development dependencies from groups under <code>[dependency-groups]</code> section</li> </ul> <p>For instance, given this <code>pyproject.toml</code>:</p> pyproject.toml<pre><code>[project]\nname = \"foo\"\ndependencies = [\"orjson&gt;=3.0.0\"]\n\n[project.optional-dependencies]\ncli = [\"click&gt;=8.0.0\"]\nhttp = [\n    \"httpx&gt;=0.27.0\",\n    \"uvicorn&gt;=0.32.0\",\n]\n\n[dependency-groups]\ndocs = [\"mkdocs==1.6.1\"]\ntest = [\n    \"pytest==8.3.3\",\n    \"pytest-cov==5.0.0\",\n]\n</code></pre> <p>the following dependencies will be extracted:</p> <ul> <li>regular dependencies: <code>orjson</code>, <code>click</code>, <code>httpx</code>, <code>uvicorn</code></li> <li>development dependencies: <code>mkdocs</code>, <code>pytest</code>, <code>pytest-cov</code></li> </ul> <p>Note</p> <p>Groups under <code>[project.optional-dependencies]</code> can be flagged as development dependency groups by using <code>--pep621-dev-dependency-groups</code> argument (or its <code>pep_621_dev_dependency_groups</code> equivalent in <code>pyproject.toml</code>).</p>"},{"location":"supported-dependency-managers/#uv","title":"uv","text":"<p>If a <code>[tool.uv.dev-dependencies]</code> section is found, deptry will assume that uv is used as a dependency manager, and will, additionally to PEP 621 dependencies, extract uv development dependencies from <code>dev-dependencies</code> entry under <code>[tool.uv]</code> section, for instance:</p> pyproject.toml<pre><code>[tool.uv]\ndev-dependencies = [\n    \"mkdocs==1.6.1\",\n    \"pytest==8.3.3\",\n    \"pytest-cov==5.0.0\",\n]\n</code></pre>"},{"location":"supported-dependency-managers/#poetry","title":"Poetry","text":"<p>Until version 2.0, Poetry did not support PEP 621 syntax to define project dependencies, instead relying on a specific syntax.</p> <p>Because Poetry now supports PEP 621, it is now treated as an extension of PEP 621 manager, allowing deptry to retrieve dependencies defined under <code>[project.dependencies]</code> and <code>[project.optional-dependencies]</code>, while still allowing retrieving:</p> <ul> <li>regular dependencies from <code>[tool.poetry.dependencies]</code> (which is still supported in Poetry 2.0)</li> <li>development dependencies from <code>[tool.poetry.group.&lt;group&gt;.dependencies]</code> and <code>[tool.poetry.dev-dependencies]</code></li> </ul>"},{"location":"supported-dependency-managers/#regular-dependencies","title":"Regular dependencies","text":"<p>Which regular dependencies are extracted depend on how you define your dependencies with Poetry, as deptry will closely match Poetry's behavior.</p> <p>If <code>[project.dependencies]</code> is not set, or is empty, regular dependencies will be extracted from <code>[tool.poetry.dependencies]</code>. For instance, in this case:</p> pyproject.toml<pre><code>[project]\nname = \"foo\"\n\n[tool.poetry.dependencies]\nhttpx = \"0.28.1\"\n</code></pre> <p><code>httpx</code> will be extracted as a regular dependency.</p> <p>If <code>[project.dependencies]</code> contains at least one dependency, then dependencies will NOT be extracted from <code>[tool.poetry.dependencies]</code>, as in that case, Poetry will only consider that data in this section enriches dependencies already defined in <code>[project.dependencies]</code> (for instance, to set a specific source), and not defining new dependencies.</p> <p>For instance, in this case:</p> pyproject.toml<pre><code>[project]\nname = \"foo\"\ndependencies = [\"httpx\"]\n\n[tool.poetry.dependencies]\nhttpx = { git = \"https://github.com/encode/httpx\", tag = \"0.28.1\" }\nurllib3 = \"2.3.0\"\n</code></pre> <p>although <code>[tool.poetry.dependencies]</code> contains both <code>httpx</code> and <code>urllib3</code>, only <code>httpx</code> will be extracted as a regular dependency, as <code>[project.dependencies]</code> contains at least one dependency, so Poetry itself will not consider <code>urllib3</code> to be a dependency of the project.</p>"},{"location":"supported-dependency-managers/#development-dependencies","title":"Development dependencies","text":"<p>In Poetry, development dependencies can be defined under either (or both):</p> <ul> <li><code>[tool.poetry.group.&lt;group&gt;.dependencies]</code> sections</li> <li><code>[tool.poetry.dev-dependencies]</code> section (which is considered legacy)</li> </ul> <p>deptry will extract dependencies from all those sections, for instance:</p> pyproject.toml<pre><code>[tool.poetry.dev-dependencies]\nmypy = \"1.14.1\"\nruff = \"0.8.6\"\n\n[tool.poetry.group.docs.dependencies]\nmkdocs = \"1.6.1\"\n\n[tool.poetry.group.test.dependencies]\npytest = \"8.3.3\"\npytest-cov = \"5.0.0\"\n</code></pre>"},{"location":"supported-dependency-managers/#pdm","title":"PDM","text":"<p>If a <code>[tool.pdm.dev-dependencies]</code> section is found, deptry will assume that PDM is used as a dependency manager, and will, additionally to PEP 621 dependencies, extract PDM development dependencies from <code>[tool.pdm.dev-dependencies]</code> section, for instance:</p> pyproject.toml<pre><code>[tool.pdm.dev-dependencies]\ndocs = [\"mkdocs==1.6.1\"]\ntest = [\n    \"pytest==8.3.3\",\n    \"pytest-cov==5.0.0\",\n]\n</code></pre>"},{"location":"supported-dependency-managers/#setuptools","title":"Setuptools","text":"<p>When using setuptools as a build backend, both <code>dependencies</code> and <code>optional-dependencies</code> can be dynamically read from <code>requirements.txt</code>-format files, for instance:</p> pyproject.toml<pre><code>[build-backend]\nrequires = [\"setuptools\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"foo\"\ndynamic = [\"dependencies\", \"optional-dependencies\"]\n\n[tool.setuptools.dynamic]\ndependencies = { file = [\"requirements.txt\"] }\n\n[tool.setuptools.dynamic.optional-dependencies]\ncli = { file = [\"cli-requirements.txt\"] }\n</code></pre> <p>In this example, regular dependencies will be extracted from both <code>requirements.txt</code> and <code>cli-requirements.txt</code> files.</p> <p>Note</p> <p>Groups under <code>[tool.setuptools.dynamic.optional-dependencies]</code> can be flagged as development dependency groups by using <code>--pep621-dev-dependency-groups</code> argument (or its <code>pep_621_dev_dependency_groups</code> equivalent in <code>pyproject.toml</code>).</p>"},{"location":"supported-dependency-managers/#requirementstxt-pip-pip-tools","title":"<code>requirements.txt</code> (pip, pip-tools)","text":"<p>deptry supports extracting dependencies using <code>requirements.txt</code> format, which is mostly used by pip and pip-tools.</p> <p>By default, deptry will look for:</p> <ul> <li>regular dependencies in <code>requirements.txt</code> (or <code>requirements.in</code> if existing, assuming pip-tools is used)</li> <li>development dependencies in <code>dev-requirements.txt</code> and <code>requirements-dev.txt</code></li> </ul> <p>For instance, given the following <code>requirements.txt</code> file:</p> requirements.txt<pre><code>click&gt;=8.0.0\norjson&gt;=3.0.0\n</code></pre> <p>and the following <code>dev-requirements.txt</code> file:</p> dev-requirements.txt<pre><code>mkdocs==1.6.1\npytest==8.3.3\npytest-cov==5.0.0\n</code></pre> <p>the following dependencies will be extracted:</p> <ul> <li>regular dependencies: <code>click</code>, <code>orjson</code></li> <li>development dependencies: <code>mkdocs</code>, <code>pytest</code>, <code>pytest-cov</code></li> </ul> <p>If a requirements file references other requirements files, for instance with <code>-r other-requirements.txt</code>, deptry will also include the dependencies from the referenced files.</p> <p>Note</p> <p>If using different files for regular dependencies, <code>--requirements-files</code> (or its <code>requirements_files</code> equivalent in <code>pyproject.toml</code>) can be used to instruct deptry about the requirements files locations. Similarly, <code>--requirements-files-dev</code> (or its <code>requirements_files_dev</code> equivalent in <code>pyproject.toml</code>) can be used for requirements files containing development dependencies.</p>"},{"location":"usage/","title":"Usage &amp; Configuration","text":""},{"location":"usage/#basic-usage","title":"Basic Usage","text":"<p>deptry can be run with:</p> <pre><code>deptry .\n</code></pre> <p>where <code>.</code> is the path to the root directory of the project to be scanned.</p> <p>If your project has multiple source directories, multiple root directories can be provided:</p> <pre><code>deptry a_directory another_directory\n</code></pre> <p>If you want to configure deptry using <code>pyproject.toml</code>, or if your dependencies are stored in <code>pyproject.toml</code>, but it is located in another location than the one deptry is run from, you can specify the location to it by using <code>--config &lt;path_to_pyproject.toml&gt;</code> argument.</p>"},{"location":"usage/#dependencies-extraction","title":"Dependencies extraction","text":"<p>deptry can extract dependencies from a broad range of dependency managers.</p> <p>Dependencies are always extracted into two separate groups:</p> <ul> <li>regular ones, meant to be used in the codebase</li> <li>development ones</li> </ul> <p>This is an important distinction, as development dependencies are usually meant to only be used outside the codebase (e.g. <code>pytest</code> to run tests, Mypy for type-checking, or Ruff for formatting). For this reason, deptry will not run Unused dependencies (DEP002) for development dependencies.</p>"},{"location":"usage/#imports-extraction","title":"Imports extraction","text":"<p>deptry will search for imports in Python files (<code>*.py</code>, and <code>*.ipynb</code> unless <code>--ignore-notebooks</code> is set) that are not part of excluded files.</p> <p>Imports will be extracted regardless of where they are made in a file (top-level, functions, class methods, guarded by conditions, ...).</p> <p>The only exception is imports that are guarded by <code>TYPE_CHECKING</code>. In this specific case, deptry will not extract those imports, as they are not considered problematic. For instance:</p> <pre><code>from __future__ import annotations\n\nfrom typing import TYPE_CHECKING\n\nif TYPE_CHECKING:\n    # This import will not be extracted as it is guarded by `TYPE_CHECKING` and `from __future__ import annotations`\n    # is used. This means the import should only be evaluated by type checkers, and should not be evaluated during runtime.\n    import mypy_boto3_s3\n</code></pre> <p>There is some support for imports created with <code>importlib.import_module</code> that use a string literal:</p> <pre><code>import importlib\n\nimportlib.import_module(\"foo\")  # package 'foo' imported\n</code></pre> <p>but not where the argument is provided dynamically from a variable, attribute, etc., e.g.:</p> <pre><code>bar = \"foo\"\nimportlib.import_module(bar)  # Not detected\n</code></pre>"},{"location":"usage/#excluding-files-and-directories","title":"Excluding files and directories","text":"<p>To determine issues with imported modules and dependencies, deptry will scan the working directory and its subdirectories recursively for <code>.py</code> and <code>.ipynb</code> files, so it can extract the imported modules from those files. Any file solely used for development purposes, such as a file used for unit testing, should not be scanned. By default, the directories <code>venv</code>, <code>.venv</code>, <code>.direnv</code>, <code>tests</code>, <code>.git</code> and the file <code>setup.py</code> are excluded.</p> <p>deptry also reads entries in <code>.gitignore</code> file, to ignore any pattern present in the file, similarly to what <code>git</code> does.</p> <p>To ignore other directories and files than the defaults, use the <code>--exclude</code> (short <code>-e</code>) flag. The argument can either be one long regular expression, or it can be reused multiple times to pass multiple smaller regular expressions. The paths should be specified as paths relative to the directory deptry is running in, without the trailing <code>./</code>. An example:</p> <pre><code>deptry . --exclude bar --exclude \".*/foo/\"\ndeptry . --exclude \"bar|.*/foo/\"\n</code></pre> <p>The two statements above are equivalent, and will both ignore all files in the directory <code>bar</code>, and all files within any directory named <code>foo</code>.</p> <p>Note that using the <code>--exclude</code> argument overwrites the defaults, and will prevent deptry from considering entries in <code>.gitignore</code>. To add additional patterns to ignore on top of the defaults instead of overwriting them, or to make sure that deptry still considers <code>.gitignore</code>, use the <code>--extend-exclude</code> (short <code>-ee</code>) flag.</p> <pre><code>deptry . --extend-exclude bar --extend-exclude \".*/foo/\"\ndeptry . --extend-exclude \"bar|.*/foo/\"\n</code></pre> <p>This will exclude <code>venv</code>, <code>.venv</code>, <code>.direnv</code>, <code>.git</code>, <code>tests</code>, <code>setup.py</code>, <code>bar</code>, and any directory named <code>foo</code>, as well as entries in <code>.gitignore</code>, if there are some.</p>"},{"location":"usage/#usage-in-pre-commit","title":"Usage in pre-commit","text":"<p>deptry can be added to your pre-commit rules. Here is an example config for your <code>.pre-commit-config.yaml</code> file:</p> <pre><code>- repo: https://github.com/fpgmaas/deptry.git\n  rev: \"&lt;tag&gt;\"\n  hooks:\n    - id: deptry\n      args: [\"--ignore\", \"DEP001\"]\n</code></pre> <p>Replace <code>&lt;tag&gt;</code> with one of the tags from the project or a specific commit hash.</p> <p>Important</p> <p>This will only pull in the pre commit-hooks config file from the version passed to the <code>rev</code> agument. The actual version of deptry that will be run will be the first one found in your path, so you will need to add deptry to your local virtual environment.</p> <p>For the pre-commit hook to run successfully, it should be run within the virtual environment of the project to be scanned, since it needs access to the metadata of the installed packages.</p>"},{"location":"usage/#increasing-verbosity","title":"Increasing verbosity","text":"<p>To show more details about the scanned Python files, the imported modules found, and how deptry determines issues in dependencies, add the <code>--verbose</code> (short <code>-v</code>) flag:</p> <pre><code>deptry . --verbose\n</code></pre>"},{"location":"usage/#configuration","title":"Configuration","text":"<p>deptry can be configured with command line arguments or by adding a <code>[tool.deptry]</code> section to <code>pyproject.toml</code>.</p>"},{"location":"usage/#lookup-hierarchy","title":"Lookup hierarchy","text":"<p>The lookup hierarchy for each configuration option is as follows:</p> <ol> <li>Default value is used</li> <li>If set, value in <code>[tool.deptry]</code> section of <code>pyproject.toml</code> is used, overriding the default</li> <li>If set, value passed through the CLI is used, overriding both the default and <code>pyproject.toml</code> values</li> </ol>"},{"location":"usage/#options","title":"Options","text":""},{"location":"usage/#config","title":"Config","text":"<p>Path to the <code>pyproject.toml</code> file that holds deptry's configuration and dependencies definition (if any).</p> <ul> <li>Type: <code>Path</code></li> <li>Default: <code>pyproject.toml</code></li> <li>CLI option name: <code>--config</code></li> <li>CLI example: <pre><code>deptry . --config sub_directory/pyproject.toml\n</code></pre></li> </ul>"},{"location":"usage/#no-ansi","title":"No ANSI","text":"<p>Disable ANSI characters in terminal output.</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>False</code></li> <li>CLI option name: <code>--no-ansi</code></li> <li>CLI example: <pre><code>deptry . --no-ansi\n</code></pre></li> </ul>"},{"location":"usage/#exclude","title":"Exclude","text":"<p>List of patterns to exclude when searching for source files.</p> <ul> <li>Type: <code>list[str]</code></li> <li>Default: <code>[\"venv\", \"\\.venv\", \"\\.direnv\", \"tests\", \"\\.git\", \"setup\\.py\"]</code></li> <li><code>pyproject.toml</code> option name: <code>exclude</code></li> <li>CLI option name: <code>--exclude</code> (short: <code>-e</code>)</li> <li><code>pyproject.toml</code> example: <pre><code>[tool.deptry]\nexclude = [\"a_directory\", \"a_python_file\\\\.py\", \"a_pattern/.*\"]\n</code></pre></li> <li>CLI example: <pre><code>deptry . --exclude \"a_directory|a_python_file\\.py|a_pattern/.*\"\n</code></pre></li> </ul>"},{"location":"usage/#extend-exclude","title":"Extend exclude","text":"<p>Additional list of patterns to exclude when searching for source files. This extends the patterns set in Exclude, to allow defining patterns while keeping the default list.</p> <ul> <li>Type: <code>list[str]</code></li> <li>Default: <code>[]</code></li> <li><code>pyproject.toml</code> option name: <code>extend_exclude</code></li> <li>CLI option name: <code>--extend-exclude</code> (short: <code>-ee</code>)</li> <li><code>pyproject.toml</code> example: <pre><code>[tool.deptry]\nextend_exclude = [\"a_directory\", \"a_python_file\\\\.py\", \"a_pattern/.*\"]\n</code></pre></li> <li>CLI example: <pre><code>deptry . --extend-exclude \"a_directory|a_python_file\\.py|a_pattern/.*\"\n</code></pre></li> </ul>"},{"location":"usage/#ignore","title":"Ignore","text":"<p>A comma-separated list of rules to ignore.</p> <ul> <li>Type: <code>list[str]</code></li> <li>Default: <code>[]</code></li> <li><code>pyproject.toml</code> option name: <code>ignore</code></li> <li>CLI option name: <code>--ignore</code> (short: <code>-i</code>)</li> <li><code>pyproject.toml</code> example: <pre><code>[tool.deptry]\nignore = [\"DEP003\", \"DEP004\"]\n</code></pre></li> <li>CLI example: <pre><code>deptry . --ignore DEP003,DEP004\n</code></pre></li> </ul>"},{"location":"usage/#per-rule-ignores","title":"Per rule ignores","text":"<p>A comma-separated mapping of packages or modules to be ignored per rule .</p> <ul> <li>Type: <code>dict[str, list[str] | str]</code></li> <li>Default: <code>{}</code></li> <li><code>pyproject.toml</code> option name: <code>per_rule_ignores</code></li> <li>CLI option name: <code>--per-rule-ignores</code> (short: <code>-pri</code>)</li> <li><code>pyproject.toml</code> example: <pre><code>[tool.deptry.per_rule_ignores]\nDEP001 = [\"matplotlib\"]\nDEP002 = [\"pandas\", \"numpy\"]\n</code></pre></li> <li>CLI example: <pre><code>deptry . --per-rule-ignores \"DEP001=matplotlib,DEP002=pandas|numpy\"\n</code></pre></li> </ul>"},{"location":"usage/#ignore-notebooks","title":"Ignore notebooks","text":"<p>Disable searching for notebooks (<code>*.ipynb</code>) files when looking for imports.</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>False</code></li> <li><code>pyproject.toml</code> option name: <code>ignore_notebooks</code></li> <li>CLI option name: <code>--ignore-notebooks</code> (short: <code>-nb</code>)</li> <li><code>pyproject.toml</code> example: <pre><code>[tool.deptry]\nignore_notebooks = true\n</code></pre></li> <li>CLI example: <pre><code>deptry . --ignore-notebooks\n</code></pre></li> </ul>"},{"location":"usage/#requirements-files","title":"Requirements files","text":"<p>List of <code>pip</code> requirements files that contain the source dependencies.</p> <ul> <li>Type: <code>list[str]</code></li> <li>Default: <code>[\"requirements.txt\"]</code></li> <li><code>pyproject.toml</code> option name: <code>requirements_files</code></li> <li>CLI option name: <code>--requirements-files</code> (short: <code>-rt</code>)</li> <li><code>pyproject.toml</code> example: <pre><code>[tool.deptry]\nrequirements_files = [\"requirements.txt\", \"requirements-private.txt\"]\n</code></pre></li> <li>CLI example: <pre><code>deptry . --requirements-files requirements.txt,requirements-private.txt\n</code></pre></li> </ul>"},{"location":"usage/#requirements-files-dev","title":"Requirements files dev","text":"<p>List of <code>pip</code> requirements files that contain the source development dependencies.</p> <ul> <li>Type: <code>list[str]</code></li> <li>Default: <code>[\"dev-requirements.txt\", \"requirements-dev.txt\"]</code></li> <li><code>pyproject.toml</code> option name: <code>requirements_files_dev</code></li> <li>CLI option name: <code>--requirements-files-dev</code> (short: <code>-rtd</code>)</li> <li><code>pyproject.toml</code> example: <pre><code>[tool.deptry]\nrequirements_files_dev = [\"requirements-dev.txt\", \"requirements-tests.txt\"]\n</code></pre></li> <li>CLI example: <pre><code>deptry . --requirements-files-dev requirements-dev.txt,requirements-tests.txt\n</code></pre></li> </ul>"},{"location":"usage/#known-first-party","title":"Known first party","text":"<p>List of Python modules that should be considered as first party ones. This is useful in case deptry is not able to automatically detect modules that should be considered as local ones.</p> <ul> <li>Type: <code>list[str]</code></li> <li>Default: <code>[]</code></li> <li><code>pyproject.toml</code> option name: <code>known_first_party</code></li> <li>CLI option name: <code>--known-first-party</code> (short: <code>-kf</code>)</li> <li><code>pyproject.toml</code> example: <pre><code>[tool.deptry]\nknown_first_party = [\"bar\", \"foo\"]\n</code></pre></li> <li>CLI example: <pre><code>deptry . --known-first-party bar --known-first-party foo\n</code></pre></li> </ul>"},{"location":"usage/#json-output","title":"JSON output","text":"<p>Write the detected issues to a JSON file. This will write the following kind of output:</p> <pre><code>[\n     {\n         \"error\": {\n             \"code\": \"DEP002\",\n             \"message\": \"uvicorn defined as a dependency but not used in the codebase\"\n         },\n         \"module\": \"uvicorn\",\n         \"location\": {\n             \"file\": \"pyproject.toml\",\n             \"line\": null,\n             \"column\": null\n         }\n     },\n     {\n         \"error\": {\n             \"code\": \"DEP002\",\n             \"message\": \"uvloop defined as a dependency but not used in the codebase\"\n         },\n         \"module\": \"uvloop\",\n         \"location\": {\n             \"file\": \"pyproject.toml\",\n             \"line\": null,\n             \"column\": null\n         }\n     },\n     {\n         \"error\": {\n             \"code\": \"DEP004\",\n             \"message\": \"black imported but declared as a dev dependency\"\n         },\n         \"module\": \"black\",\n         \"location\": {\n             \"file\": \"src/main.py\",\n             \"line\": 4,\n             \"column\": 0\n         }\n     },\n     {\n         \"error\": {\n             \"code\": \"DEP003\",\n             \"message\": \"httpx imported but it is a transitive dependency\"\n         },\n         \"module\": \"httpx\",\n         \"location\": {\n             \"file\": \"src/main.py\",\n             \"line\": 6,\n             \"column\": 0\n         }\n     }\n]\n</code></pre> <ul> <li>Type: <code>Path</code></li> <li>Default: <code>None</code></li> <li><code>pyproject.toml</code> option name: <code>json_output</code></li> <li>CLI option name: <code>--json-output</code> (short: <code>-o</code>)</li> <li><code>pyproject.toml</code> example: <pre><code>[tool.deptry]\njson_output = \"deptry_report.txt\"\n</code></pre></li> <li>CLI example: <pre><code>deptry . --json-output deptry_report.txt\n</code></pre></li> </ul>"},{"location":"usage/#package-module-name-map","title":"Package module name map","text":"<p>Deptry will automatically detect top level modules names that belong to a module in two ways. The first is by inspecting the installed packages. The second, used as fallback for when the package is not installed, is by translating the package name to a module name (<code>Foo-Bar</code> translates to <code>foo_bar</code>).</p> <p>This however is not always sufficient. A situation may occur where a package is not installed because it is optional and unused in the current installation. Then when the package name doesn't directly translate to the top level module name, or there are more top level modules names, Deptry may report both unused packages, and missing packages. A concrete example is deptry reporting unused (optional) dependency <code>foo-python</code>, and missing package <code>foo</code>, while package <code>foo-python</code> would install top level module <code>foo</code>, if it were installed.</p> <p>A solution is to pre-define a mapping between the package name and the top level module name(s).</p> <ul> <li>Type <code>dict[str, list[str] | str]</code></li> <li>Default: <code>{}</code></li> <li><code>pyproject.toml</code> option name: <code>package_module_name_map</code></li> <li>CLI option name: <code>--package-module-name-map</code> (short: <code>-pmnm</code>)</li> <li><code>pyproject.toml</code> examples: <pre><code>[tool.deptry.package_module_name_map]\nfoo-python = \"foo\"\n</code></pre> Or for multiple top level module names: <pre><code>[tool.deptry.package_module_name_map]\nfoo-python = [\n    \"foo\",\n    \"bar\",\n]\n</code></pre></li> <li>CLI examples: <pre><code>deptry . --package-module-name-map \"foo-python=foo\"\n</code></pre> Multiple module names are joined by a pipe (<code>|</code>): <pre><code>deptry . --package-module-name-map \"foo-python=foo|bar\"\n</code></pre> Multiple package name to module name mappings are joined by a comma (<code>,</code>): <pre><code>deptry . --package-module-name-map \"foo-python=foo,bar-python=bar\"\n</code></pre></li> </ul>"},{"location":"usage/#pep-621-dev-dependency-groups","title":"PEP 621 dev dependency groups","text":"<p>Historically, PEP 621 did not define a standard convention for specifying development dependencies. PEP 735 now covers this, but in the meantime, several projects defined development dependencies under <code>[project.optional-dependencies]</code>. deptry offers a mechanism to interpret specific optional dependency groups as development dependencies.</p> <p>By default, all dependencies under <code>[project.dependencies]</code> and <code>[project.optional-dependencies]</code> are extracted as regular dependencies. By using the <code>--pep621-dev-dependency-groups</code> argument, users can specify which groups defined under <code>[project.optional-dependencies]</code> should be treated as development dependencies instead. This is particularly useful for projects that adhere to PEP 621 but do not employ a separate build tool for declaring development dependencies.</p> <p>For example, consider a project with the following <code>pyproject.toml</code>:</p> <pre><code>[project]\n...\ndependencies = [\"httpx\"]\n\n[project.optional-dependencies]\nplot = [\"matplotlib\"]\ntest = [\"pytest\"]\n</code></pre> <p>By default, <code>httpx</code>, <code>matplotlib</code> and <code>pytest</code> are extracted as regular dependencies. By specifying <code>--pep621-dev-dependency-groups=test</code>, <code>pytest</code> dependency will be treated as a development dependency instead.</p> <ul> <li>Type: <code>list[str]</code></li> <li>Default: <code>[]</code></li> <li><code>pyproject.toml</code> option name: <code>pep621_dev_dependency_groups</code></li> <li>CLI option name: <code>--pep621-dev-dependency-groups</code> (short: <code>-ddg</code>)</li> <li><code>pyproject.toml</code> example: <pre><code>[tool.deptry]\npep621_dev_dependency_groups = [\"test\", \"docs\"]\n</code></pre></li> <li>CLI example: <pre><code>deptry . --pep621-dev-dependency-groups \"test,docs\"\n</code></pre></li> </ul>"},{"location":"usage/#experimental-namespace-package","title":"Experimental namespace package","text":"<p>Warning</p> <p>This option is experimental and disabled by default for now, as it could degrade performance in large codebases.</p> <p>Enable experimental namespace package (PEP 420) support.</p> <p>When enabled, deptry will not only rely on the presence of <code>__init__.py</code> file in a directory to determine if it is a local Python module or not, but will consider any Python file in the directory or its subdirectories, recursively. If a Python file is found, then the directory will be considered as a local Python module.</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>False</code></li> <li><code>pyproject.toml</code> option name: <code>experimental_namespace_package</code></li> <li>CLI option name: <code>--experimental-namespace-package</code></li> <li><code>pyproject.toml</code> example: <pre><code>[tool.deptry]\nexperimental_namespace_package = true\n</code></pre></li> <li>CLI example: <pre><code>deptry . --experimental-namespace-package\n</code></pre></li> </ul>"}]}